# OopisOS Core Test Suite v3.4 - "The Engineer's Gauntlet" (Self-Contained)
echo "===== OopisOS Core Test Suite v3.4 Initializing ====="
echo "This script tests non-interactive core functionality, including"
echo "scripted interactive prompts and the sudo authentication lifecycle."
echo "---------------------------------------------------------------------"
echo ""

# --- Phase 1: Login and Workspace Preparation ---
echo "--- Phase: Logging in as 'root' and Preparing Workspace ---"
login root mcgoopis
delay 400
mkdir -p /home/userDiag/diag_workspace/
chown userDiag /home/userDiag/diag_workspace/
delay 500
login userDiag pantload
echo "Current User (expected: userDiag):"
whoami
echo "Current Path after login (expected: /home/userDiag):"
pwd
delay 400

# --- Phase 1.5: Create and Inflate Diagnostic Assets ---
echo ""
echo "--- Phase: Creating diagnostic assets script dynamically ---"
cd /home/userDiag/diag_workspace

# Create the assets script using a series of echo commands for portability
echo '#!/bin/oopis_shell' > ./diag_assets.sh
echo '# diag_assets.sh - v3.4 - Dynamically generated by diag.sh' >> ./diag_assets.sh
echo '' >> ./diag_assets.sh
echo 'echo "--- Creating assets for interactive prompt tests ---"' >> ./diag_assets.sh
echo '# For rm -i, cp -i, mv -i' >> ./diag_assets.sh
echo 'echo "This file will be interactively deleted." > interactive_file.txt' >> ./diag_assets.sh
echo 'echo "SOURCE" > interactive_source.txt' >> ./diag_assets.sh
echo 'echo "TARGET" > interactive_target.txt' >> ./diag_assets.sh
echo 'echo "SOURCE 2" > mv_source_2.txt' >> ./diag_assets.sh
echo 'echo "TARGET 2" > mv_target_2.txt' >> ./diag_assets.sh
echo '' >> ./diag_assets.sh
echo 'echo "--- Creating assets for advanced find, diff, and cp tests ---"' >> ./diag_assets.sh
echo '# For find -delete' >> ./diag_assets.sh
echo 'touch deleteme.tmp' >> ./diag_assets.sh
echo '# For find -exec' >> ./diag_assets.sh
echo 'echo "I should not be executable" > exec_test.sh; chmod 600 exec_test.sh' >> ./diag_assets.sh
echo '# For cp -p (preserve) test' >> ./diag_assets.sh
echo 'touch preserve_perms.txt; chmod 700 preserve_perms.txt' >> ./diag_assets.sh
echo '# For diff test' >> ./diag_assets.sh
echo 'echo -e "line one\\nline two\\nline three" > diff_a.txt' >> ./diag_assets.sh
echo 'echo -e "line one\\nline 2\\nline three" > diff_b.txt' >> ./diag_assets.sh
echo '' >> ./diag_assets.sh
echo 'echo "--- Creating assets for run, awk, and xargs tests ---"' >> ./diag_assets.sh
#...
echo '# For run argument test' >> ./diag_assets.sh
# Create the arg_test.sh script using two simple echos to avoid complex quoting.
echo "echo 'echo \"Arg 1: \$1, Arg 2: \$2, ' > ./arg_test.sh" >> ./diag_assets.sh
echo "echo 'Arg Count: \$\#, All Args: \$@\' >> ./arg_test.sh" >> ./diag_assets.sh
echo 'chmod 700 ./arg_test.sh' >> ./diag_assets.sh
echo '# For governor test' >> ./diag_assets.sh
echo 'echo '\''#!/bin/oopis_shell'\'' > infinite_loop.sh' >> ./diag_assets.sh
echo 'echo '\''run ./infinite_loop.sh'\'' >> infinite_loop.sh' >> ./diag_assets.sh
echo 'chmod 700 infinite_loop.sh' >> ./diag_assets.sh
echo '# For xargs deletion test' >> ./diag_assets.sh
echo 'touch file1.tmp file2.tmp file3.tmp' >> ./diag_assets.sh
echo '' >> ./diag_assets.sh
echo 'echo "--- Creating assets for data processing tests ---"' >> ./diag_assets.sh
echo 'echo "alpha" > data_stream.txt' >> ./diag_assets.sh
echo 'echo "gamma" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "beta" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "delta" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "gamma" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "100" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "50" >> data_stream.txt' >> ./diag_assets.sh
echo 'echo "200" >> data_stream.txt' >> ./diag_assets.sh

chmod 700 ./diag_assets.sh
echo "Dynamically created diag_assets.sh. Now executing it..."
run ./diag_assets.sh
echo "Asset creation complete."
delay 700
echo "---------------------------------------------------------------------"

# --- Phase 2: Parser/Lexer Robustness ---
echo ""
echo "===== Testing: Parser/Lexer Robustness (Quotes, Escapes, Errors) ====="
delay 400
echo "--- Test: Filenames with spaces (Quoting) ---"
mkdir "a directory with spaces"
ls -l
touch "a directory with spaces/a file with spaces.txt"
echo "Quoted content" > "a directory with spaces/a file with spaces.txt"
cat "a directory with spaces/a file with spaces.txt"
rm -r -f "a directory with spaces"
delay 300
echo "--- Test: Complex echo with mixed quotes and escapes ---"
echo 'A string with "double quotes" inside single quotes' > mixed_quotes.txt
cat mixed_quotes.txt
rm -f mixed_quotes.txt
delay 300
echo "---------------------------------------------------------------------"


# --- Phase 3: RIGOROUS File System Commands ---
echo ""
echo "===== Testing: Rigorous File System Ops (cp, mv, diff) ====="
delay 400
echo "--- Test: diff ---"
diff diff_a.txt diff_b.txt
echo "--- Test: cp -p (preserve permissions) ---"
ls -l preserve_perms.txt
cp -p preserve_perms.txt preserved_copy.txt
ls -l preserved_copy.txt
echo "--- Test: mv (move to directory) ---"
mkdir mv_test_dir
mv preserved_copy.txt mv_test_dir/
ls mv_test_dir/
echo "--- Test: Cross-type overwrite failures (The real test) ---"
mkdir overwrite_dir
touch overwrite_file.txt
check_fail "cp overwrite_file.txt overwrite_dir"
check_fail "mv overwrite_file.txt overwrite_dir"
delay 700
echo "---------------------------------------------------------------------"


# --- Phase 4: Group Permissions and Ownership ---
echo ""
echo "===== Testing: Group Permissions (chgrp, usermod, groupadd) ====="
delay 400
login root mcgoopis
groupadd testgroup
useradd testuser
testpass
testpass
usermod -aG testgroup testuser
chmod 755 /home/userDiag
cd /home/userDiag/diag_workspace
echo "Initial content" > group_test_file.txt
chown userDiag group_test_file.txt
chgrp testgroup group_test_file.txt
chmod 664 group_test_file.txt
login testuser
testpass
cd /home/userDiag/diag_workspace
echo "Append by group member" >> group_test_file.txt
cat group_test_file.txt
login Guest
cd /home/userDiag/diag_workspace
check_fail "echo 'Append by other user' >> group_test_file.txt"
login root
mcgoopis
removeuser -f testuser
groupdel testgroup
rm -f /home/userDiag/diag_workspace/group_test_file.txt
chmod 700 /home/userDiag
login userDiag
pantload
cd /home/userDiag/diag_workspace
delay 700
echo "---------------------------------------------------------------------"

# --- Phase 5: Sudo & Security Model ---
echo ""
echo "===== Testing: Sudo & Security Model ====="
delay 400
echo "--- Test: visudo and sudoers modification ---"
login root
mcgoopis
useradd sudouser
testpass
testpass
echo "sudouser ALL" >> /etc/sudoers
echo "--- Test: Sudo lifecycle for authorized user ---"
login sudouser
testpass
echo "Attempting first sudo command (password required)..."
sudo echo "Sudo command successful."
testpass
echo "Attempting second sudo command (should not require password)..."
sudo ls /home/root
echo "--- Test: sudo re-authentication after logout (password required) ---"
login sudouser
testpass
echo "Attempting sudo after re-login (password required again)..."
sudo ls /home/root
testpass
echo "--- Test: Failed sudo by unauthorized user ---"
login Guest
check_fail "sudo ls /home/root"
# Cleanup
login root
mcgoopis
removeuser -f sudouser
# A simple way to remove the last line of the file
grep -v "sudouser" /etc/sudoers > sudoers.tmp; mv sudoers.tmp /etc/sudoers
login userDiag
pantload
cd /home/userDiag/diag_workspace
delay 700
echo "---------------------------------------------------------------------"

# --- Phase 6: Advanced Scripting & Governor ---
echo ""
echo "===== Testing: Advanced Scripting & Governor ====="
delay 400
echo "--- Test: Script argument passing ---"
run ./arg_test.sh first "second arg" third
echo "--- Test: Script execution governor (expect graceful failure) ---"
run ./infinite_loop.sh
delay 700
echo "---------------------------------------------------------------------"


# --- Phase 7: Advanced Data Processing ---
echo ""
echo "===== Testing: Advanced Data Processing (awk, xargs) ======="
delay 400
echo "--- Test: awk with BEGIN block ---"
awk 'BEGIN { print "--- Report ---" } { print $0 }' data_stream.txt
echo "--- Test: Destructive xargs operation ---"
ls *.tmp
ls *.tmp | xargs rm
check_fail "ls file1.tmp"
echo "xargs deletion verified."
delay 700
echo "---------------------------------------------------------------------"

# --- Phase 8: Final Cleanup ---
echo ""
echo "--- Final Cleanup ---"
cd /
login root
mcgoopis
delay 300
rm -r -f /home/userDiag/diag_workspace
login Guest
echo "Final user list:"
listusers
delay 700
echo "---------------------------------------------------------------------"
echo ""
echo "      ===== OopisOS Core Test Suite v3.4 Complete ======="
echo " "
delay 500
echo "  ======================================================"
delay 150
echo "  ==                                                  =="
delay 150
echo "  ==           OopisOS Core Diagnostics               =="
delay 150
echo "  ==            ALL SYSTEMS OPERATIONAL               =="
delay 200
echo "  ==                                                  =="
delay 150
echo "  ======================================================"
echo " "
delay 500
echo "(As usual, you've been a real pantload!)"
delay 200